{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","lazy","Promise","all","resolve","setTimeout","then","getRandItem","randItems","Math","floor","random","length","RandomObject","Planet","Browser","Ghost","IceCream","Chocolate","SpeechBubble","randomMood","randomColor","toString","ReactDOM","render","StrictMode","fallback","className","size","mood","color","text","style","position","marginTop","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCFAC,EAAMC,gBAAK,WACf,OAAOC,QAAQC,IAAI,CACjB,6BACA,IAAID,SAAQ,SAACE,GAAD,OAAaC,WAAWD,EAAS,UAC5CE,MAAK,6CAuBJC,EAAc,SAACC,GAAD,OAClBA,EAAUC,KAAKC,MAAMD,KAAKE,SAAWH,EAAUI,UAE3CC,EAAeN,EAvBD,CAClBO,IACAC,IAGAC,IACAC,IACAC,IAEAC,MAeIC,EAAab,EAZD,CAChB,UACA,QACA,WACA,aACA,YASIc,EAAc,IAAMZ,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBW,SAAS,IAExEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CACEC,SACE,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,kBACb,kBAACd,EAAD,CACEe,KAAM,IACNC,KAAMT,EACNU,MAAOT,EACPU,KAAK,kBAGT,wBAAIC,MAAO,CAAEC,SAAU,WAAYC,UAAW,QAA9C,iBAIJ,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD4DpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.79c09fb3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  Planet,\n  Browser,\n  Backpack,\n  File,\n  Ghost,\n  IceCream,\n  Mug,\n  SpeechBubble,\n  Chocolate,\n} from \"react-kawaii\";\n\nconst App = lazy(() => {\n  return Promise.all([\n    import(\"./App\"),\n    new Promise((resolve) => setTimeout(resolve, 2000)),\n  ]).then(([App]) => App);\n});\n\nconst randObjects = [\n  Planet,\n  Browser,\n  //Backpack,\n  //File,\n  Ghost,\n  IceCream,\n  Chocolate,\n  // Mug,\n  SpeechBubble,\n];\n\nconst randMoods = [\n  \"shocked\",\n  \"happy\",\n  \"blissful\",\n  \"lovestruck\",\n  \"excited\",\n];\n\nconst getRandItem = (randItems) =>\n  randItems[Math.floor(Math.random() * randItems.length)];\n\nconst RandomObject = getRandItem(randObjects);\nconst randomMood = getRandItem(randMoods);\n\nconst randomColor = \"#\" + Math.floor(Math.random() * 16777200).toString(16);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense\n      fallback={\n        <div className=\"suspense__icon--wrapper\">\n          <div className=\"suspense__icon\">\n            <RandomObject\n              size={300}\n              mood={randomMood}\n              color={randomColor}\n              text=\"Hello World!\"\n            />\n          </div>\n          <h2 style={{ position: 'relative', marginTop: '23%' }}>Loading ...</h2>\n        </div>\n      }\n    >\n      <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}